{"version":3,"sources":["сomponents/Form/Form.module.css","сomponents/Contacts/Contacts.module.css","App.module.css","сomponents/Container/Container.module.css","сomponents/Filter/Filter.module.css","сomponents/Container/Container.js","сomponents/Form/Form.js","сomponents/Filter/Filter.js","сomponents/Contacts/Contacts.js","App.js","index.js"],"names":["module","exports","Container","children","className","s","Form","state","id","name","number","handleChange","e","currentTarget","value","setState","nanoid","handleSubmit","submit","props","preventDefault","reset","onSubmit","this","Label","Input","type","pattern","title","required","onChange","FormBtn","Component","Filter","Contacts","contacts","onDeleteContact","ContactList","map","ContactItem","ContactData","onClick","ContactDelete","App","initialContacts","filter","formSubmitHandler","formData","find","contact","alert","prevState","changeFilter","findContact","normalizeContacts","toLowerCase","includes","deleteContact","contactId","localStorage","getItem","parsedContacts","JSON","parse","prevProps","setItem","stringify","visibleContacts","Title","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75830df6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"Form_Form__yRkfc\",\"Label\":\"Form_Label__3QbXF\",\"Input\":\"Form_Input__1Cyr6\",\"FormBtn\":\"Form_FormBtn__V8Gy6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactList\":\"Contacts_ContactList__dPc4t\",\"ContactItem\":\"Contacts_ContactItem__3TtF2\",\"ContactData\":\"Contacts_ContactData__1jBMP\",\"ContactDelete\":\"Contacts_ContactDelete__XXql6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Title\":\"App_Title__3tFVP\",\"App\":\"App_App__1a85D\",\"App-logo\":\"App_App-logo__1xOrc\",\"App-logo-spin\":\"App_App-logo-spin__2-aMb\",\"App-header\":\"App_App-header__12GhC\",\"App-link\":\"App_App-link__9Y2ke\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Container_Container__2JoRw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Label\":\"Filter_Label__2agBF\",\"Input\":\"Filter_Input__2AKm_\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Container.module.css';\n\nconst Container = ({ children }) => (\n  <div className={s.Container}>{children}</div>\n);\n\nexport default Container;\nContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\nimport s from './Form.module.css';\n\nclass Form extends Component {\n  state = {\n    id: '',\n    name: '',\n    number: '',\n  };\n\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({\n      id: nanoid(5),\n      [name]: value,\n    });\n  };\n\n  handleSubmit = e => {\n    const { submit } = this.props;\n    e.preventDefault();\n\n    submit(this.state);\n\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ id: '', name: '', number: '' });\n  };\n  render() {\n    return (\n      <form className={s.Form} onSubmit={this.handleSubmit}>\n        <label className={s.Label}>\n          Name\n          <input\n            className={s.Input}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={this.state.name}\n            onChange={this.handleChange}\n          />\n        </label>\n        <label className={s.Label}>\n          Number\n          <input\n            className={s.Input}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={this.state.number}\n            onChange={this.handleChange}\n          />\n        </label>\n        <button className={s.FormBtn} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default Form;\n\nForm.propTypes = {\n  submit: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport s from './Filter.module.css';\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <label>\n      <input\n        className={s.Input}\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport s from './Contacts.module.css';\n\nconst Contacts = ({ contacts, onDeleteContact }) => {\n  return (\n    <ul className={s.ContactList}>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className={s.ContactItem}>\n          <p className={s.ContactData}>\n            {name}: {number}\n          </p>\n          <button\n            onClick={() => onDeleteContact(id)}\n            className={s.ContactDelete}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\nexport default Contacts;\n\nContacts.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n  onDeleteContact: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport Container from './сomponents/Container';\nimport Form from './сomponents/Form';\nimport Filter from './сomponents/Filter';\nimport Contacts from './сomponents/Contacts';\nimport initialContacts from './initialContacts.json';\nimport s from './App.module.css';\n\nclass App extends Component {\n  state = {\n    contacts: initialContacts,\n    filter: '',\n  };\n\n  formSubmitHandler = formData => {\n    const { name } = formData;\n    const { contacts } = this.state;\n    const existingContact = contacts.find(contact => name === contact.name);\n    if (existingContact) {\n      return alert(`${name} is already in contacts`);\n    }\n    this.setState(prevState => ({\n      contacts: [formData, ...prevState.contacts],\n    }));\n  };\n\n  changeFilter = e => {\n    const { value } = e.currentTarget;\n    this.setState({\n      filter: value,\n    });\n  };\n  findContact = () => {\n    const { contacts, filter } = this.state;\n    const normalizeContacts = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizeContacts),\n    );\n  };\n\n  deleteContact = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  componentDidMount() {\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n\n    if (parsedContacts) {\n      this.setState({\n        contacts: parsedContacts,\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { contacts } = this.state;\n    if (contacts !== prevState.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(contacts));\n    }\n  }\n\n  render() {\n    const visibleContacts = this.findContact();\n\n    return (\n      <Container>\n        <h1 className={s.Title}>Phonebook</h1>\n        <Form submit={this.formSubmitHandler} />\n        <h2 className={s.Title}>Contacts</h2>\n        <Filter value={this.state.filter} onChange={this.changeFilter} />\n        <Contacts\n          contacts={visibleContacts}\n          onDeleteContact={this.deleteContact}\n        />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}